lua_shared_dict session_map 1m;
lua_shared_dict docker_map 2m;
lua_shared_dict token_cache 2m;
lua_shared_dict proxy_mgr 100k;
lua_shared_dict lock_map 2m;

# load lua files
lua_package_path "/kb/deployment/services/narrative/docker/?;/kb/deployment/services/narrative/docker/?.lua;;";

# initilize proxymgr - set shared dictionaries
init_by_lua_block {
	json = require("json")
	proxymgr = require("proxy_mgr")
	proxymgr:initialize{
		lock_name = "lock_map",
		session_map = ngx.shared.session_map,
		docker_map = ngx.shared.docker_map,
		token_cache = ngx.shared.token_cache,
		proxy_mgr = ngx.shared.proxy_mgr,
		provision_count = {{ default .Env.narr_provision_count "20" }}
	}
}

init_worker_by_lua_block {
        local success, err = ngx.timer.every(proxymgr.mark_interval, proxymgr.marker)
        if success then
            ngx.log(ngx.INFO, "Set marker function to run every "..proxymgr.mark_interval.." seconds")
        else
            ngx.log(ngx.ERR, "Error setting marker to run every "..proxymgr.mark_interval.." seconds: "..err)
        end

        local success, err = ngx.timer.every(proxymgr.sweep_interval, proxymgr.sweeper)
        if success then
            ngx.log(ngx.INFO, "Set marker function to run every "..proxymgr.sweep_interval.." seconds")
        else
            ngx.log(ngx.ERR, "Error setting marker to run every "..proxymgr.sweep_interval.." seconds: "..err)
        end

        success, err = ngx.timer.every(proxymgr.provision_interval, proxymgr.provisioner)
        if success then
            ngx.log(ngx.INFO, "Set provisioner function to run every "..proxymgr.provision_interval.." seconds")
        else
            ngx.log(ngx.ERR, "Error setting provisioner to run every "..proxymgr.provision_interval.." seconds: "..err)
        end
}
